/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
    'mithril', 'string-plus', 'jquery', 'helpers/form_helper', 'helpers/pipeline_configs/tooltips',
    'helpers/mithril_component_mixins', 'models/shared/users', 'models/shared/roles', 'jquery.textcomplete'
], function (m, s, $, f, tt, ComponentMixins, Users, Roles) {

  var autoComplete = function (values, model, attrName) {
    return function (elem, isInitialized, context) {
      if (!isInitialized) {
        var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));

        context.onunload = function () {
          $inputElem.textcomplete('destroy');
        };

        $inputElem.textcomplete([
          {
            words:   values, //the list of auto-completes
            match:   /(^|,)\s*([^,]+)$/,
            index:   2, // use the second match in the regex to extract the search term
            search:  function (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, function (word) {
                return word.toLowerCase().indexOf(term) === 0 ? word : null;
              }));
            },
            replace: function (word) {
              return '$1 ' + word + ', ';
            }
          }
        ]);

        $inputElem.on('textComplete:select', function () {
          model[attrName]($inputElem.val());
        });
      }
    };
  };

  var ApprovalWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);
    },

      view: function (ctrl, args) {
        return (
                <f.accordion accordionTitles={[(<span>Permissions</span>)]}
                             accordionKeys={['templatePermissions']}
                             selectedIndex={ctrl.vmState('templatePermissionsSelected', m.prop(0))}
                             class='accordion'>
                  <div>
                    <f.row>
                      <f.inputWithLabel config={autoComplete(Users.list, args.authorization().admins(), 'users')}
                                        attrName='users'
                                        model={args.authorization().admins()}/>
                      <f.inputWithLabel
                              config={autoComplete(Roles.list, args.authorization().admins(), 'roles')}
                              attrName='roles'
                              model={args.authorization().admins()} end/>

                    </f.row>
                  </div>
                </f.accordion>
        );
      }
    };

    return ApprovalWidget;
});