/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'string-plus', 'helpers/form_helper', 'helpers/mithril_component_mixins', 'models/template_configs/template',
  'models/pipeline_configs/stages', 'models/pipeline_configs/jobs', 'views/pipeline_configs/pipeline_flow_widget',
  'views/pipeline_configs/errors_widget', 'views/template_configs/approval_widget',
  'views/template_configs/pipeline_selection_widget'
], function (m, s, f, ComponentMixins, Template, Stages, Jobs,
             PipelineFlowWidget, ErrorsWidget, ApprovalWidget, PipelineSelectionWidget) {
  var TemplateConfigWidget = {
    controller: function (args) {
      var self              = this;
      self.template         = m.prop(Template.defaultTemplate());
      self.currentSelection = m.prop(self.template().stages().firstStage());
      self.vm               = new Template.vm();
      ComponentMixins.HasViewModel.call(this);

      var setTemplateAndPreserveSelection = function (newTemplate) {
        var oldtemplate = self.template();
        var newSelection = newTemplate.stages().firstStage();

        if (oldtemplate) {
          newSelection = newTemplate.stages().findStage(function (stage) {
            return stage.name() === self.currentSelection().name();
          });
        }
        newTemplate.isExtractedFromPipeline(oldtemplate.isExtractedFromPipeline());
        newTemplate.pipeline(oldtemplate.pipeline());

        self.template(newTemplate);
        self.currentSelection(newSelection);
      };

      self.onBack = function() {
        m.route('default');
      };

      self.onCreateTemplate = function () {
        self.vm.clearErrors();

        if (!self.template().isValid()) {
          self.vm.markClientSideErrors();
          self.vm.saveDefault();
          return;
        }

        self.vm.updating();

        self.template().create().then(function (template) {
          m.route('/' + template.name());
        }, function (data) {
          self.vm.saveFailed(data);
          if (data.data) {
            setTemplateAndPreserveSelection(Template.fromJSON(data.data));
          }
        });
      };
    },

    view: function (ctrl, args) {
      var errors = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;
      var isExtractedFromPipeline = ctrl.template().isExtractedFromPipeline();

      var templateStages = (
        <PipelineFlowWidget pipeline={ctrl.template}
                            currentSelection={ctrl.currentSelection}
                            elasticProfiles={args.elasticProfiles}
                            vm={ctrl.vmState('templateFlowConfig')}/>
      );

      if(isExtractedFromPipeline){
        templateStages = (
          <PipelineSelectionWidget template={ctrl.template}/>
        );
      }

      var header = (
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column size={10}>
                <h1>
                  Add Template
                </h1>
              </f.column>
              <f.column size={1}>
                <f.button onclick={ctrl.onBack.bind(ctrl)}>
                  Back
                </f.button>
              </f.column>
              <f.column size={1}>
                <f.button onclick={ctrl.onCreateTemplate.bind(ctrl)}
                          class={'save-template ' + ctrl.vm.saveState()}>
                  <span class={'save-state ' + ctrl.vm.saveState()}/>
                  Save
                </f.button>
              </f.column>
            </f.row>
          </header>
        </div>
      );

      return (
              <form class='template-main'>
                {header}
                <div class='template-body'>
                  <f.row>
                    {errors}
                  </f.row>
                  <f.row>
                    <f.inputWithLabel attrName='name'
                                      label='Template name'
                                      model={ctrl.template()}
                                      validate={true}
                                      isRequired={true}
                                      size={12}
                                      largeSize={12}/>
                  </f.row>
                  <f.row>
                    <f.column end={true} size={12} class="permissions">
                      <ApprovalWidget authorization={ctrl.template().authorization}/>
                    </f.column>
                  </f.row>
                  <f.row>
                    <f.row>
                      <f.checkBox model={ctrl.template()}
                                  attrName='isExtractedFromPipeline'
                                  class="extract-from-pipeline"
                                  label='Extract From Pipeline'
                                  size={12}
                                  end={true}/>
                      </f.row>
                    <f.column size={12}>
                      {templateStages}
                    </f.column>
                  </f.row>
                </div>
              </form>
      );
    }
  };

  return TemplateConfigWidget;
});
