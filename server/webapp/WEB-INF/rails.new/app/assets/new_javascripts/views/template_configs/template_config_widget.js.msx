/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'string-plus', 'helpers/form_helper', 'helpers/mithril_component_mixins', 'models/template_configs/template',
  'views/pipeline_configs/pipeline_flow_widget', 'views/pipeline_configs/errors_widget', 'views/template_configs/approval_widget',
  'js-routes'
], function (m, s, f, ComponentMixins, Template, PipelineFlowWidget, ErrorsWidget, ApprovalWidget, Routes) {
  var TemplateConfigWidget = {
    controller: function (args) {
      var templateName = m.route.param('templateName') || args.templateName;

      var self              = this;
      self.etag             = m.prop();
      self.template         = m.prop(new Template({}));
      self.currentSelection = m.prop();
      self.elasticProfiles  = args.elasticProfiles;
      self.vm               = new Template.vm();

      ComponentMixins.HasViewModel.call(this);

      var setTemplateAndPreserveSelection = function (newTemplate) {
        var newSelection = newTemplate.stages().firstStage() || self.currentSelection();

        self.template(newTemplate);
        self.currentSelection(newSelection);
      };

      var extractEtag = function (xhr) {
        if (xhr.status === 200) {
          self.etag = m.prop(xhr.getResponseHeader('ETag'));
        }
        return xhr.responseText;
      };

      self.reloadPage = function () {
        var url = Routes.apiv3AdminTemplatePath({template_name: templateName});
        Template.get(url, extractEtag).then(setTemplateAndPreserveSelection);
      };

      self.reloadPage();

      self.onBack = function() {
          m.route('default');
      };

      self.onSaveTemplate = function () {
        self.vm.clearErrors();

        if(!self.template().isValid()) {
          self.vm.markClientSideErrors();
          self.vm.saveDefault();
          return;
        }

        self.vm.updating();

        self.template().update(self.etag(), extractEtag).then(function (data) {
          setTemplateAndPreserveSelection(Template.fromJSON(data));
          self.vm.saveSuccess();
        }, function (data) {
          self.vm.saveFailed(data);
          if (data.data) {
            setTemplateAndPreserveSelection(Template.fromJSON(data.data));
          }
        });
      };
    },

    view: function (ctrl, args) {
      var errors = ctrl.vm.hasErrors() ? (<ErrorsWidget errors={ctrl.vm.errors()}/>) : undefined;

      var header = (
              <div class="header-panel">
                <header class="page-header">
                  <f.row>
                    <f.column size={10}>
                      <h1>{ctrl.template().name()}</h1>
                    </f.column>
                    <f.column size={1}>
                      <f.button onclick={ctrl.onBack.bind(ctrl)}>
                        Back
                      </f.button>
                    </f.column>
                    <f.column size={1}>
                      <f.button onclick={ctrl.onSaveTemplate.bind(ctrl)}
                                class={'save-template ' + ctrl.vm.saveState()}>
                        <span class={'save-state ' + ctrl.vm.saveState()}/>
                        Save
                      </f.button>
                    </f.column>
                  </f.row>
                </header>
                </div>
      );

      var auth;
      if(args.isUserAdmin) {
        auth = (
          <f.row class="permissions">
            <f.column end={true} size={12}>
              <ApprovalWidget authorization={ctrl.template().authorization}/>
            </f.column>
          </f.row>
        );
      }

      return (
        <form class='template-main'>
          {header}
            <div class='template-body'>
                <f.row>
                    {errors}
                </f.row>
              {auth}
          <f.row>
            <f.column size={12}>
              <PipelineFlowWidget class="stages"
                                  pipeline={ctrl.template}
                                  currentSelection={ctrl.currentSelection}
                                  elasticProfiles={ctrl.elasticProfiles}
                                  vm={ctrl.vmState('templateFlowConfig')}
              />
            </f.column>
          </f.row>
            </div>
        </form>
      );
    }
  };

  return TemplateConfigWidget;
});
