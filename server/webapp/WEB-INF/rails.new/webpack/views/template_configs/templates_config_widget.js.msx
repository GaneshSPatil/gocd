/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var m      = require('mithril');
var Stream = require('mithril/stream');
var f      = require('helpers/form_helper');

var ComponentMixins = require('helpers/mithril_component_mixins');

var Modal = require('views/shared/new_modal');

var Templates         = require('models/template_configs/templates');
var TemplateRowWidget = require('views/template_configs/template_row_widget');


var TemplatesConfigWidget = {
  oninit: function () {
    var self = this;
    ComponentMixins.ManagesCollection.call(this, {as: 'Template'});
    ComponentMixins.HasViewModel.call(this);
    self.modal     = null;
    self.templates = Stream(new Templates());
    self.vmState   = Stream();
    self.message   = Stream({type: undefined, message: undefined});

    self.clearMessage = function () {
      self.message({});
    };

    self.reloadPage = function () {
      Templates.all().then(function (templates) {
        self.templates(templates);
      }, function (message) {
        self.message({type: 'alert', message: message});
      }).always(m.redraw);
    };

    self.reloadPage();

    self.addNewTemplate = function () {
      m.route.set('/create/new');
    };

    self.deleteTemplate = function (modal, template) {
      var onSuccess = function (response) {
        modal.destroy();
        self.deleteVm(template.name());
        self.reloadPage();
        self.message({type: 'success', message: response.message});
      };

      var onFailure = function (response) {
        modal.destroy();
        self.message({type: 'alert', message: response.message});
      };

      template.delete().then(onSuccess, onFailure);
    };

    self.deleteConfirm = function (template) {
      var modal = new Modal({
        title:    'Are you sure?',
        body:     () => (<div>Are you sure you want to delete the template <strong>{template.name()}</strong>?</div>),
        oncancel: function () {
          modal.destroy();
        },
        buttons:  function () {
          return [
            {
              text:    'Delete',
              class:   'delete-template',
              onclick: function () {
                self.deleteTemplate(modal, template);
              }
            }
          ];
        }
      });
      modal.render();
    };
  },

  view: function (vnode) {
    var message;
    if (vnode.state.message().message) {
      message = (
        <f.row>
          <f.callout type={vnode.state.message().type}>
            {vnode.state.message().message}

            <button class="close-button" aria-label="Dismiss alert" type="button"
                    onclick={vnode.state.clearMessage.bind(vnode.state)}>
              <span aria-hidden="true">&times;</span>
            </button>
          </f.callout>
        </f.row>
      );
    }

    return (
      <div>
        <div class="header-panel">
          <header class="page-header">
            <f.row>
              <f.column size={6}>
                <h1>Templates</h1>
              </f.column>
              <f.column size={6}>
                <f.button onclick={vnode.state.addNewTemplate.bind(vnode.state)}
                          class="add-template"
                          disabled={!vnode.attrs.isUserAdmin}>
                  New Template
                </f.button>
              </f.column>
            </f.row>
          </header>
        </div>

        <div class="template-container">
          {message}
          <f.row>
            {
              vnode.state.templates().mapTemplates(function (template) {
                return (
                  <TemplateRowWidget template={template}
                                     deleteConfirm={vnode.state.deleteConfirm}
                                     isUserAdmin={vnode.attrs.isUserAdmin}
                  />
                );
              })
            }
          </f.row>
        </div>

      </div>
    );
  }
};

module.exports = TemplatesConfigWidget;
